<?xml version="1.0" encoding="utf-8"?>
<Template>
  <Dependencies>
    <![CDATA[
#include <pwd.h>    
    ]]>
  </Dependencies>
  <Public>
    <![CDATA[
	virtual Boolean loadByUserID(String userID);
    ]]>
  </Public>
  <Private>
    <![CDATA[

	static bool hasPasswordMinimumLength(const passwd* pw);
	static bool hasPasswordForceMixCase(const passwd* pw);
	static int getLoginRetries(const passwd* pw);
	static time_t getIdleTimeout(const passwd* pw);
	static time_t getLastLoginValue(const passwd* pw);

	void loadByPasswd(passwd *user);

    ]]>
  </Private>
  <Declaration>
    <![CDATA[
#include <unistd.h>
#include <sys/stat.h>
#include <grp.h>
#include <utmpx.h>
#include <login_cap.h>
  
/* Custom Methods */
bool UNIX_Account::hasPasswordMinimumLength(const passwd* pw)
{
  login_cap_t *lc;
	int min_length = 1;
	if ((lc = login_getpwclass(pw)) != NULL) {
		/* minpasswordlen capablity */
		return ((int)login_getcapnum(lc, "minpasswordlen",
				min_length, min_length)) > 1;
	}
	return false;
}

bool UNIX_Account::hasPasswordForceMixCase(const passwd* pw)
{
	login_cap_t *lc;
	if ((lc = login_getpwclass(pw)) != NULL) {
		return login_getcapbool(lc, "mixpasswordcase", 1) == 1;
	}
	return false;
}

int UNIX_Account::getLoginRetries(const passwd* pw)
{
	login_cap_t *lc;
	if ((lc = login_getpwclass(pw)) != NULL) {
		return login_getcapnum(lc, "login-retries", 1, 1);
	}
	return 10;
}

time_t UNIX_Account::getIdleTimeout(const passwd* pw)
{
	login_cap_t *lc;
	if ((lc = login_getpwclass(pw)) != NULL) {
		/* idle timeout capablity */
		return ((time_t)login_getcaptime(lc, "idletime",
				0, 0));
	}
	return (time_t)0;
}

time_t UNIX_Account::getLastLoginValue(const passwd* pw)
{
	struct utmpx *u;
	if (setutxdb(UTXDB_LASTLOGIN, NULL) != 0)
				return (time_t)0;
	if ((u = getutxuser(pw->pw_name)) == NULL) {
		return (time_t)0;
	}
	time_t t = u->ut_tv.tv_sec;
	return t;
}

Boolean UNIX_Account::loadByUserID(String userID)
{
  passwd* user;
	int id = atoi(userID.getCString());
	if ((user = getpwuid(id)) != NULL)
	{
    loadByPasswd(user);
		return true;
	}
	return false;
}

void UNIX_Account::loadByPasswd(passwd *user)
{
	struct tm* clock;			// create a time structure
    _instanceID = String (user->pw_name);
	_caption = String (user->pw_gecos);
	_description = String ("");
	_elementName = String("Account");
	_generation = Uint64(0);
    if (sizeof(user->pw_dir) == 0) 
      _installDate = CIMHelper::getOSInstallDate();
    else {
      /// We could at least check the user profile creationdate
      _installDate = CIMHelper::getInstallDate(user->pw_dir);
    }
	_name = String (user->pw_name);
	_operationalStatus.clear();
	_operationalStatus.append(2); //OK
	_statusDescriptions.clear();
	_statusDescriptions.append("OK");
	_status = String(DEFAULT_STATUS);
	_healthState = Uint16(DEFAULT_HEALTH_STATE);
	_communicationStatus = Uint16(0);
	_detailedStatus = Uint16(0);
	_operatingStatus = Uint16(DEFAULT_OPERATING_STATUS);
	_primaryStatus =Uint16(DEFAULT_PRIMARY_STATUS);
	_enabledState = Uint16(DEFAULT_ENABLED_STATE);
	_otherEnabledState = String ("");
	_requestedState = Uint16(0);
	_enabledDefault = Uint16(1);
	time_t ll = getLastLoginValue(user);
	if (ll == 0) _timeOfLastStateChange = CIMHelper::getOSInstallDate();
	else {
		clock = gmtime(&(ll));	// Get the last modified time and put it into the time structure
		_timeOfLastStateChange = CIMDateTime(
			clock->tm_year + 1900, 
			clock->tm_mon + 1, 
			clock->tm_mday,
			clock->tm_hour,
			clock->tm_min,
			clock->tm_sec,
			0,0,
			clock->tm_gmtoff
			);
	}
	_availableRequestedStates.clear();
	_transitioningToState = Uint16(0);
	_systemCreationClassName = String("UNIX_ComputerSystem");
	_systemName = CIMHelper::HostName;
	_creationClassName = String("UNIX_Account");
	char userId[256];
	sprintf(userId, "%d", user->pw_uid);
	_userID = String (userId);
	_objectClass.clear();
	_objectClass.append("POSIXAccount");
	_descriptions.clear();
	_host.clear();
	_host.append(CIMHelper::HostName);
	_localityName.clear();
	_organizationName.clear();
	_oU.clear();
	_seeAlso.clear();
	gid_t *groups;
	int ngroups = 1022;
	groups = (gid_t*)calloc(ngroups, sizeof(gid_t));
	if (getgrouplist(user->pw_name, user->pw_gid, groups, &ngroups) == 0)
	{
		for(int i = 0; i < ngroups;i++)
		{
			if (groups[i])
			{
			  	_seeAlso.append(String(group_from_gid(groups[i], 0)));
		  	}
		}
	}
	_userCertificate.clear();
	_userPassword.clear();
	_userPassword.append(String(user->pw_passwd));
	_passwordHistoryDepth = Uint16(0);
	if (user->pw_change == 0) 
	_passwordExpiration = CIMHelper::getOSInstallDate();
	else {
	clock = gmtime(&(user->pw_change));	// Get the last modified time and put it into the time structure
	_passwordExpiration = CIMDateTime(
	  clock->tm_year + 1900,
	  clock->tm_mon + 1,
	  clock->tm_mday,
	  clock->tm_hour,
	  clock->tm_min,
	  clock->tm_sec,
	  0,0,
	  clock->tm_gmtoff);
	}
	_complexPasswordRulesEnforced.clear();
	time_t idle = getIdleTimeout(user);
	_inactivityTimeout  = CIMDateTime(idle, true);
	_maximumSuccessiveLoginFailures = Uint16(getLoginRetries(user));
	_lastLogin = _timeOfLastStateChange;
	_userPasswordEncryptionAlgorithm = Uint16(1);
	_otherUserPasswordEncryptionAlgorithm = String ("SHA512");
	_userPasswordEncoding = Uint32(5);
}


    ]]>
  </Declaration>
  <Initialize>
    <![CDATA[
	setpwent();
	return true;    
    ]]>
  </Initialize>
  <Load>
    <![CDATA[
  passwd* user;
  if ((user = getpwent()) != NULL)
	{
    	loadByPasswd(user);
		return true;
	}
  return false;    
    ]]>
  </Load>
  <Finalize>
    <![CDATA[
	endpwent();
	return true;
    ]]>
  </Finalize>
</Template>
